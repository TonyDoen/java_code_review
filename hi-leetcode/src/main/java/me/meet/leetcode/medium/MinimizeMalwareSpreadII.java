package me.meet.leetcode.medium;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public final class MinimizeMalwareSpreadII {
    private MinimizeMalwareSpreadII() {
    }
    /**
     * url: http://www.noteanddata.com/leetcode-928-Minimize-Malware-Spread-II-java-solution-note-2.html
     * url: https://www.cnblogs.com/grandyang/p/12228494.html
     * url: https://leetcode-cn.com/submissions/detail/122097434/
     *
     * 928. Minimize Malware Spread II
     *(This problem is the same as *Minimize Malware Spread*, with the differences bolded.)
     * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
     * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
     * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
     * We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
     *
     * Example 1:
     * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
     * Output: 0
     *
     * Example 2:
     * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
     * Output: 1
     *
     * Example 3:
     * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
     * Output: 1
     *
     * Note:
     * 1 < graph.length = graph[0].length <= 300
     * 0 <= graph[i][j] == graph[j][i] <= 1
     * graph[i][i] = 1
     * 1 <= initial.length < graph.length
     * 0 <= initial[i] < graph.length
     */
    /**
     * 928. 最大程度上减少恶意软件的传播之二
     * <p>
     * <p>
     * 时间复杂度
     * 所有操作是O(M+MNN+N)， 也就是O(MNN), 其中M是initial的个数， N是graph的节点数
     * <p>
     * 空间复杂度
     * O(M+N*2+N), 也就是O(N)
     */
    static int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> initialSet = new HashSet<>();
        for (int node : initial) {
            initialSet.add(node);
        }
        Map<Integer, Integer> uniqueSourceMap = new HashMap<>();
        Set<Integer> uniqueSourceSet = new HashSet<>();
        for (int node : initial) {
            Set<Integer> visited = new HashSet<>();
            Queue<Integer> queue = new LinkedList<>();
            queue.add(node);
            while (queue.size() > 0) {
                int v = queue.poll();
                visited.add(v);

                if (!uniqueSourceSet.contains(v)) {
                    uniqueSourceSet.add(v);
                    uniqueSourceMap.put(v, node);
                } else {
                    uniqueSourceMap.remove(v);
                }

                for (int i = 0; i < graph.length; ++i) {
                    if (graph[v][i] == 1 && !initialSet.contains(i) && !visited.contains(i)) {
                        queue.add(i);
                    }
                }
            }
        }
        int[] countTable = new int[graph.length];
        int maxi = 0;

        for (Map.Entry<Integer, Integer> entry : uniqueSourceMap.entrySet()) {
            int i = entry.getValue();
            countTable[i]++;
            if (countTable[i] > countTable[maxi]) maxi = i;
            else if (countTable[i] == countTable[maxi] && i < maxi) maxi = i;
        }
        return maxi;
    }

//    static int minMalwareSpread2(int[][] graph, int[] initial) {
//        int mn = Integer.MAX_VALUE, res = 0;
//        HashSet<Integer> infected = new HashSet<>();
//        for (int n : initial) {
//            infected.remove(n);
//            int cnt = helper(graph, infected, n);
//            if (cnt < mn || (cnt == mn && n < res)) {
//                mn = cnt;
//                res = n;
//            }
//        }
//        return 0;
//    }
//
//    private static int helper(int[][] graph, HashSet<Integer> infected, int num) {
//        Queue<Integer> q = new LinkedList<>(infected);
//        while (!q.isEmpty()) {
//            Integer t = q.poll();
//            for (int i = 0; i < graph[t].length; i++) {
//                if (i == num || 1 != graph[t][i] || infected.contains(i)) {
//                    continue;
//                }
//                infected.add(i);
//                q.add(i);
//            }
//        }
//        return infected.size();
//    }

    static int minMalwareSpread2(int[][] graph, int[] initial) {
        Arrays.sort(initial);

        Set<Integer> mal = new HashSet<>();
        for (int n : initial) {
            mal.add(n);
        }

        int max = -1, ret = -1;
        for (int n : initial) {
            int save = 0;
            Set<Integer> visited = new HashSet<>();
            visited.add(n);
            for (int i = 0; i < graph.length; i++) {
                if (i != n && graph[n][i] == 1) {
                    int temp = dfs(i, visited, mal, graph);
                    if (temp < 0) continue;
                    save += temp;
                }
            }
            if (save > max) {
                ret = n;
                max = save;
            }
        }
        return ret;
    }

    private static int dfs(int n, Set<Integer> visited, Set<Integer> mal, int[][] graph) {
        if (visited.contains(n)) {
            return 0;
        }
        if (mal.contains(n)) {
            return -1;
        }
        visited.add(n);

        int ret = 1;
        for (int i = 0; i < graph.length; i++) {
            if (i != n && graph[n][i] == 1) {
                int temp = dfs(i, visited, mal, graph);
                if (temp == -1) {
                    mal.add(n);
                    return -1;
                }
                ret += temp;
            }
        }
        return ret;
    }

    public static void main(String[] args) {
        int[][] graph = new int[][]{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}};
        int[] initial = new int[]{0, 1};
        int res = minMalwareSpread(graph, initial);
        System.out.println(res);

        int res2 = minMalwareSpread2(graph, initial);
        System.out.println(res2);
    }
}
