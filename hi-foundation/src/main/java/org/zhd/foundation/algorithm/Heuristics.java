package org.zhd.foundation.algorithm;

public class Heuristics
{
    // 八皇后问题
    public static void _8queens()
    {
        // ro
    }
}

// 试探法算法
// 试探法也叫做回溯法
// 试探法中，放弃当前候选解，并继续寻找下一个候选解的过程，叫做回溯
// 扩大当前候选解的规模，以继续试探的过程，叫向前试探

// 试探法算法的基本步骤
// 1.针对所有问题，定义问题的解空间
// 2.确定易于搜索的解空间结构
// 3.以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索

// 试探算法3要素
// 1.解空间：表示要解决问题的范围，不知道范围的搜索是不可能找到结果的
// 2.约束条件：包括隐性的和显性的，题目要求和题目隐含约束，搜索有解的保证
// 3.状态树：构造深搜索过程的依据，整个搜索以此树展开

// 试探法算法（回溯法）：适合解决没有要求最优解的问题。若采用，一定要注意跳出条件，以及搜索完成标志，否则死循环

// 影响试探法算法效率的因素
// 1.搜索树的结构，解的分布，约束条件的判断
// 2.改进回溯算法的途径
// 3.搜索顺序
// 4.节点少的分支优先，解多的分支优先
// 5.让回溯尽量早发生